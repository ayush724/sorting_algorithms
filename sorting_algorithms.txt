sites to take notes from:-
https://www.simplilearn.com/tutorials/cpp-tutorial/sorting-in-cpp


Algorithm	             Time Complexity	                   Space Complexity
 	        Best	         Average	  Worst	                Worst
Selection Sort	O(n2)	         O(n2)  	  O(n2)	                O(1)
Bubble Sort	O(n)	         O(n2)	          O(n2)	                O(1)
Insertion Sort	O(n)	         O(n2)	          O(n2)	                O(1)
Heap Sort	O(n log(n))	 O(n log(n))	  O(n log(n))	        O(1)
Quick Sort	O(n log(n))	 O(n log(n))	  O(n2)	                O(n)
Merge Sort	O(n log(n))	 O(n log(n))	  O(n log(n))	        O(n)
Bucket Sort	O(n +k)	         O(n +k)          O(n2)	                O(n)
Radix Sort	O(nk)	         O(nk)	          O(nk)	                O(n + k)
Count Sort	O(n +k)	         O(n +k)	  O(n +k)	        O(k)


// Selection sort
In insertion sort we take the min out of the unsorted array put it on the left side, to make a sorted array on left, and then repeat it to get the second min etc.
#include <iostream>
using namespace std;
int main()
{
    int a[6]={8,4,14,10,2,9};
    int k=0;
    for(int i=0;i<6;i++){
        int min=a[i];
        for(int j=i+1;j<6;j++){
            if(min>a[j]){
                min=a[j];
                k=j;
            }
        }
        if(a[i]!=min){
            int temp=a[i];
            a[i]=a[k];
            a[k]=temp;
        }
    }
    for(int i=0;i<6;i++)
    cout<<a[i]<<endl;

    return 0;
}

//Insertion sort
In insertion sort, we pick an element and then compare it with the left side of the sorted array and then swap it until the element goes to its smallest location.
#include <iostream>
using namespace std;
int main()
{
    int a[6]={8,4,14,10,2,9};
    int k=0;
    for(int i=1;i<6;i++){
        int k=a[i];
        int j=i-1;
        while((a[j]>k)&&j>=0){
            a[j+1]=a[j];
            j--;
        }
        a[j+1]=k;
    }
    for(int i=0;i<6;i++)
    cout<<a[i]<<endl;

    return 0;
}

5 4 2 8 9
4 5 2 8 9 -> 4 5 5 8 9 -> 4 4 5 8 9
2 4 5 8 9

quick sort
In this u partition the array from a pivot element, the element to the left of the pivot is smaller than the pivot element,for that u make a partition function , there in a loop u first swap with i whenever u encounter an element smaller than the pivot and then at the end of loop swap the pivot with the element at i+1.
#include <iostream>
using namespace std;
int partition(int a[],int left,int right){
    int pivot=a[right];
    int i=left-1;
    for(int j=left;j<=right;j++){
        if(a[j]<pivot){
            i++;
            int temp=a[i];
            a[i]=a[j];
            a[j]=temp;
        }
    }
    a[right]=a[i+1];
    a[i+1]=pivot;
    return (i+1);
}
void quicksort(int a[],int left, int right){
    if(left<right){
        int p=partition(a,left,right);
        quicksort(a,left,p-1);
        quicksort(a,p+1,right);
    }
}
int main()
{
    int a[6]={8,4,14,10,2,9};
    int k=0;
    quicksort(a,0,5);
    for(int i=0;i<6;i++)
    cout<<a[i]<<endl;
    return 0;


5 4 2 8 9

partition 1 0->4
pivot = 9
5 4 2 8 9
p=4
partition 2 0->3
pivot = 8
5 4 2 8
p=3
partition 3 0->2
pivot = 2
5 4 2
2 4 5


mergesort
In mergesort we break the array into singular elements and then we arrange the array back in ascending order while backtracking 
#include <iostream>
using namespace std;
void merge(int a[],int left,int mid,int right){
    int leftarraylength=mid-left+1;
    int rightarraylength=right-mid;
    int leftarray[leftarraylength],rightarray[rightarraylength];
    for(int i=0;i<leftarraylength;i++)
    leftarray[i]=a[i+left];
    for(int i=0;i<=rightarraylength;i++)
    rightarray[i]=a[i+mid+1];
    
    int i=0,j=0,k=left;
    while(i<leftarraylength&&j<rightarraylength){
        if(leftarray[i]<rightarray[j]){
            a[k]=leftarray[i];
            i++;
        }else{
            a[k]=rightarray[j];
            j++;
        }
        k++;
    }
    while(i<leftarraylength)
    a[k++]=leftarray[i++];
    while(j<rightarraylength)
    a[k++]=rightarray[j++];
}
void mergesort(int a[],int left,int right){
    if(left<right){
        int mid=(left+right)/2;
        mergesort(a,left,mid);
        mergesort(a,mid+1,right);
        merge(a,left,mid,right);
    }
}
int main()
{
    int a[6]={8,4,14,10,2,9};
    int k=0;
    mergesort(a,0,5);
    for(int i=0;i<6;i++)
    cout<<a[i]<<endl;
    return 0;
}
}

         5 4 2 8 9
      5 4 2        8 9
    5 4     2     8   9
   5   4    2     8   9

Heap sort
If the index of any element in the array is i, the element in the index 2i+1 will become the left child and element in 2i+2 index will become the right child. Also, the parent of any element at index i is given by the lower bound of (i-1)/2.
In the case of a complete tree, the first index of a non-leaf node is given by n/2 - 1. All other nodes after that are leaf-nodes and thus don't need to be heapified.

#include <iostream>
  using namespace std;
  
  void heapify(int arr[], int n, int i) {
    // Find largest among root, left child and right child
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
  
    if (left < n && arr[left] > arr[largest])
      largest = left;
  
    if (right < n && arr[right] > arr[largest])
      largest = right;
  
    // Swap and continue heapifying if root is not largest
    if (largest != i) {
      swap(arr[i], arr[largest]);
      heapify(arr, n, largest);
    }
  }
  
  // main function to do heap sort
  void heapSort(int arr[], int n) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--)
      heapify(arr, n, i);
  
    // Heap sort
    for (int i = n - 1; i >= 0; i--) {
      swap(arr[0], arr[i]);
  
      // Heapify root element to get highest element at root again
      heapify(arr, i, 0);
    }
  }
  
  // Print an array
  void printArray(int arr[], int n) {
    for (int i = 0; i < n; ++i)
      cout << arr[i] << " ";
    cout << "\n";
  }
  
  // Driver code
  int main() {
    int arr[] = {1, 12, 9, 5, 6, 10};
    int n = sizeof(arr) / sizeof(arr[0]);
    heapSort(arr, n);
  
    cout << "Sorted array is \n";
    printArray(arr, n);
  }



Count sort
#include <bits/stdc++.h>
using namespace std;

vector<int> countSort(vector<int>& inputArray)
{

	int N = inputArray.size();

	// Finding the maximum element of array inputArray[].
	int M = 0;

	for (int i = 0; i < N; i++)
		M = max(M, inputArray[i]);

	// Initializing countArray[] with 0
	vector<int> countArray(M + 1, 0);

	// Mapping each element of inputArray[] as an index
	// of countArray[] array

	for (int i = 0; i < N; i++)
		countArray[inputArray[i]]++;

	// Calculating prefix sum at every index
	// of array countArray[]
	for (int i = 1; i <= M; i++)
		countArray[i] += countArray[i - 1];

	// Creating outputArray[] from countArray[] array
	vector<int> outputArray(N);

	for (int i = N - 1; i >= 0; i--)

	{
		outputArray[countArray[inputArray[i]] - 1]
			= inputArray[i];

		countArray[inputArray[i]]--;
	}

	return outputArray;
}

int main(){
	vector<int> inputArray = { 4, 3, 12, 1, 5, 5, 3, 9 };
	
	vector<int> outputArray = countSort(inputArray);

	for (int i = 0; i < inputArray.size(); i++)
		cout << outputArray[i] << " ";

	return 0;
}


A sorting algorithm has different properties like:

Inplace or not: An in-place sorting algorithm does not use any extra space to arrange the given elements in order i.e. sorts the elements by swapping them. For example: insertion sort, selection sort, etc.

Stability: A stable sorting algorithm keeps the equal elements in same order as in the input. For example: insertion sort, merge sort, bubble sort, etc.

Comparison-based or not: As the word suggests, a comparison-based algorithm compares elements to each other to sort them like bubble sort, insertion sort, selection sort, etc. The non-comparison based sorting algorithms work on assumptions like counting sort, bucket sort and do not sort using comparison operator.

Internal or External: Internal sorting can be carried out while residing in the computer's memory whereas when there are a large number of elements external sorting has to be carried out by storing data in files. Sorting algorithms can be implemented both internally and externally depending on memory requirement.
